name: Release Auth Flow CLI

on:
  push:
    branches:
      - master

permissions:
  contents: write
  discussions: write

jobs:
  create_release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Get version
        id: get_version
        run: |
          echo "version=$(date +'%Y.%m.%d.%H%M')" >> $GITHUB_OUTPUT

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Auth Flow CLI ${{ steps.get_version.outputs.version }}
          body: |
            Release of Auth Flow CLI version ${{ steps.get_version.outputs.version }}
            
            This release was automatically created from the latest changes merged into the master branch.
            
            For full details, see the [CHANGELOG.md](https://github.com/Amcinox/auth-flow-cli/blob/master/CHANGELOG.md)
          draft: false
          prerelease: false

  build_and_release:
    name: Build and Release
    needs: create_release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        include:
          - os: ubuntu-latest
            artifact_name: auth-flow-cli
            asset_name: auth-flow-cli-linux-${{ needs.create_release.outputs.version }}
          - os: macos-latest
            artifact_name: auth-flow-cli
            asset_name: auth-flow-cli-macos-${{ needs.create_release.outputs.version }}
          - os: windows-latest
            artifact_name: auth-flow-cli.exe
            asset_name: auth-flow-cli-windows-${{ needs.create_release.outputs.version }}.exe

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Rust
      uses: actions-rs/toolchain@v1
      with:
        profile: minimal
        toolchain: stable

    - name: Build
      run: cargo build --release

    - name: Prepare macOS binary
      if: matrix.os == 'macos-latest'
      run: |
        chmod +x target/release/${{ matrix.artifact_name }}
        # Create a ZIP archive for macOS
        zip -j ${{ matrix.asset_name }}.zip target/release/${{ matrix.artifact_name }}

    - name: Upload Release Asset (macOS)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./${{ matrix.asset_name }}.zip
        asset_name: ${{ matrix.asset_name }}.zip
        asset_content_type: application/zip

    - name: Upload Release Asset (non-macOS)
      if: matrix.os != 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./target/release/${{ matrix.artifact_name }}
        asset_name: ${{ matrix.asset_name }}
        asset_content_type: application/octet-stream